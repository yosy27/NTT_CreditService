openapi: 3.0.3
info:
  title: Credit Service API
  version: 4.0.0
  description: >
    Credit products API.
    - Loans (PERSONAL/BUSINESS) live under /credits
    - Credit card lines live under /credit-lines

servers:
  - url: http://localhost:8585

tags:
  - name: Loans
    description: Loan operations (PERSONAL/BUSINESS)  # Operaciones de PRÉSTAMOS
  - name: CreditLines
    description: Credit card lines operations         # Operaciones de LÍNEAS DE CRÉDITO
  - name: Common
    description: Cross-product queries                # Consultas transversales (overdue, etc.)

paths:
  # Loans
  /credits:
    post:
      tags: [Loans]
      summary: Create loan
      description: >
        Creates a PERSONAL or BUSINESS loan.
         Rules:
         - PERSONAL: only one active loan per customer.
         - BUSINESS: multiple loans allowed.
        - Admission: reject if customer has overdue debts.
      operationId: registerLoan
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoanRequest' }
      responses:
        '201':
          description:  Loan created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoanResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }

    get:
      tags: [ Loans ]
      summary: List loans
      description: >
        Returns loans. Use filters to scope the result. # Listado global con filtros
      operationId: listLoans
      parameters:
        - in: query
          name: customerId
          schema: { type: string }
          description: Filter by customer id.
        - in: query
          name: type
          schema: { $ref: '#/components/schemas/LoanType' }
          description: Filter by loan type.
        - in: query
          name: status
          schema: { $ref: '#/components/schemas/CreditStatus' }
          description: Filter by status.
        - in: query
          name: includeClosed
          schema: { type: boolean, default: false }
          description:  Include CLOSED loans.
      responses:
        '200':
          description: Loan list
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/LoanResponse' }

#  /customers/{customerId}/credits:
#    get:
#      tags: [Loans]
#      summary: List credits by customer
#      description: Return loans of the client specific.
#      operationId: listLoansByCustomer
#      parameters:
#        - in: path
#          name: customerId
#          required: true
#          schema: { type: string }
#          description: Customer identifier.
#              - in: query
#          name: type
#          schema: { $ref: '#/components/schemas/CreditType' }
#          description: Filtra por tipo de crédito.
#        - in: query
#          name: status
#          schema: { $ref: '#/components/schemas/CreditStatus' }
#          description: Filtra por estado del crédito.
#      responses:
#        '200':
#          description: List of client credits
#          content:
#            application/json:
#              schema:
#                type: array
#                items: { $ref: '#/components/schemas/LoanResponse' }
#        '404': { $ref: '#/components/responses/NotFound' }

  /credits/search:
    get:
      tags: [Loans]
      summary: Search loans by customer document
      description: >
        Returns loans for the provided document
      operationId: searchLoansByDocument
      parameters:
        - in: query
          name: documentType
          required: true
          schema: { $ref: '#/components/schemas/DocumentType' }
          description: Tipo de documento (DNI, RUC, CE).
        - in: query
          name: documentNumber
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Loans found
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/LoanResponse' }
        '404': { $ref: '#/components/responses/NotFound' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /credits/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
        description: Loan id.
    get:
      tags: [Loans]
      summary: Get loan by ID
      operationId: getLoan
      responses:
        '200':
          description: Loan found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoanResponse' }
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      tags: [Loans]
      summary: Partial update
      description: >
        Updates allowed fields only.
      operationId: patchLoan
      requestBody:
        required: true
        content:
          application/merge-patch+json:
            schema: { $ref: '#/components/schemas/LoanUpdate' }
      responses:
        '200':
          description: Loan updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoanResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
    put:
      tags: [ Loans ]
      summary: Update Loan
      description: Update Loan
      operationId: updateLoan
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/LoanRequest' }
      responses:
        '200':
          description: Loan updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoanResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

    delete:
      tags: [ Loans ]
      summary: Delete loan
      description: >
        Delete loan
      operationId: deleteLoan
      responses:
        '204':
          description: Delete
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  /credits/{id}/close:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
        description: Unique credit identifier.
    post:
      tags: [Loans]
      summary: Close loan (logical delete)
      description: >
        Close the loan by performing a logical deletion.
      operationId: closeLoan
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreditCloseRequest' }
      responses:
        '200':
          description: Loan closed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoanResponse' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  /credits/{id}/limit:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
        description: Identificador único del crédito.
    patch:
      tags: [Loans]
      summary: Adjust loan limit
      description: >
        New limit must be ≥ current balance.
      operationId: adjustLoanLimit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required: [newLimit]
              properties:
                newLimit:
                  type: number
                  minimum: 0
                reason:
                  type: string
                  maxLength: 200
                  description: Reason for adjustment (audit).
      responses:
        '200':
          description:  Limit updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LoanResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409':
          description: Business rule violated.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }

  /credits/{id}/payments:
    post:
      tags: [Loans]
      summary: Apply loan payment
      description: >
        Register a payment (owner or third-party). #Pago a préstamo
      operationId: applyLoanPayment
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreditPaymentRequest' }
      responses:
        '201':
          description: Payment posted
          headers:
            Location:
              description: Movement URI
              schema: { type: string, format: uri }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CreditMovement' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

#  /credits/{id}/charges:
#    post:
#      tags: [Loans]
#      summary: Aplicar cargo (consumo)
#      description: >
#        Registra un cargo/consumo. Para `CREDIT_CARD`, valida que el consumo no exceda el **disponible**.
#      operationId: applyCharge
#      parameters:
#        - in: path
#          name: id
#          required: true
#          schema: { type: string }
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema: { $ref: '#/components/schemas/CreditChargeRequest' }
#      responses:
#        '201':
#          description: Cargo registrado
#          headers:
#            Location:
#              description: URI del movimiento (cargo) creado.
#              schema: { type: string, format: uri }
#          content:
#            application/json:
#              schema: { $ref: '#/components/schemas/CreditMovement' }
#        '400': { $ref: '#/components/responses/BadRequest' }
#        '404': { $ref: '#/components/responses/NotFound' }
#        '422': { $ref: '#/components/responses/UnprocessableEntity' }

#  /credits/{id}/balance:
#    get:
#      tags: [Loans]
#      summary: Get loan balance
#      description: Returns limit, balance and available
#      operationId: getLoanBalance
#      parameters:
#        - in: path
#          name: id
#          required: true
#          schema: { type: string }
#      responses:
#        '200':
#          description: OK
#          content:
#            application/json:
#              schema: { $ref: '#/components/schemas/CreditBalance' }
#        '404': { $ref: '#/components/responses/NotFound' }
#
#  /credits/{id}/movements:
#    get:
#      tags: [Loans]
#      summary: List loan movements
#      description: >
#        Returns movements for the loan.
#      operationId: listLoanMovements
#      parameters:
#        - in: path
#          name: id
#          required: true
#          schema: { type: string }
#        - in: query
#          name: type
#          schema:
#            type: string
#            enum: [PAYMENT, INTEREST, FEE, REVERSAL]
#          description: Filter by movement type.
#      responses:
#        '200':
#          description: Movement list
#          content:
#            application/json:
#              schema:
#                type: array
#                items: { $ref: '#/components/schemas/CreditMovement' }
#        '404': { $ref: '#/components/responses/NotFound' }

#  Credit Lines
  /credit-lines:
    post:
      tags: [ CreditLines ]
      summary: Create credit line
      description: Creates a credit line used by credit cards. # Crea línea para tarjeta
      operationId: createCreditLine
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreditLineRequest' }
      responses:
        '201':
          description: Credit line created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CreditLineResponse' }

    get:
      tags: [ CreditLines ]
      summary: List credit lines
      operationId: listCreditLines
      parameters:
        - in: query
          name: customerId
          schema: { type: string }
        - in: query
          name: status
          schema: { $ref: '#/components/schemas/CreditStatus' }
      responses:
        '200':
          description: Credit line list
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/CreditLineResponse' }

  /credit-lines/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [ CreditLines ]
      summary: Get credit line by ID
      operationId: getCreditLine
      responses:
        '200':
          description: Credit line
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CreditLineResponse' }
        '404': { $ref: '#/components/responses/NotFound' }

    patch:
      tags: [ CreditLines ]
      summary: Partial update (credit line)
      operationId: patchCreditLine
      requestBody:
        required: true
        content:
          application/merge-patch+json:
            schema: { $ref: '#/components/schemas/CreditLineUpdate' }
      responses:
        '200':
          description: Credit line updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CreditLineResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }

    put:
      tags: [ CreditLines ]
      summary: Replace credit line
      operationId: updateCreditLine
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreditLineRequest' }
      responses:
        '200':
          description: Credit line replaced
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CreditLineResponse' }
    delete:
      tags: [ CreditLines ]
      summary: Delete credit line
      operationId: deleteCreditLine
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  /credit-lines/{id}/limit:
    patch:
      tags: [ CreditLines ]
      summary: Adjust credit line limit
      description: New limit must be ≥ current balance. # Límite ≥ saldo
      operationId: adjustCreditLineLimit
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ newLimit ]
              properties:
                newLimit: { type: number, minimum: 0 }
                reason: { type: string, maxLength: 200 }
      responses:
        '200':
          description: Limit updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CreditLineResponse' }

  /credit-lines/{id}/charges:
    post:
      tags: [ CreditLines ]
      summary: Post charge (card purchase)
      description: Validates available amount before posting. # Valida disponible
      operationId: postCreditLineCharge
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreditChargeRequest' }
      responses:
        '201':
          description: Charge posted
          headers:
            Location:
              description: Movement URI
              schema: { type: string, format: uri }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CreditMovement' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }

  /credit-lines/{id}/payments:
    post:
      tags: [ CreditLines ]
      summary: Post payment to the credit line
      operationId: postCreditLinePayment
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreditPaymentRequest' }
      responses:
        '201':
          description: Payment posted
          headers:
            Location:
              description: Movement URI
              schema: { type: string, format: uri }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CreditMovement' }

#  /credit-lines/{id}/balance:
#    get:
#      tags: [ CreditLines ]
#      summary: Get credit line balance
#      description: Returns limit, balance and available. # Saldos de línea
#      operationId: getCreditLineBalance
#      parameters:
#        - in: path
#          name: id
#          required: true
#          schema: { type: string }
#      responses:
#        '200':
#          description: OK
#          content:
#            application/json:
#              schema: { $ref: '#/components/schemas/CreditBalance' }
#        '404': { $ref: '#/components/responses/NotFound' }
#
#  /credit-lines/{id}/movements:
#    get:
#      tags: [ CreditLines ]
#      summary: List credit line movements
#      description: Returns movements for the credit line. # Movimientos de tarjeta
#      operationId: listCreditLineMovements
#      parameters:
#        - in: path
#          name: id
#          required: true
#          schema: { type: string }
#        - in: query
#          name: type
#          schema:
#            type: string
#            enum: [ CHARGE, PAYMENT, INTEREST, FEE, REVERSAL ]
#        - in: query
#          name: limit
#          schema: { type: integer, minimum: 1, maximum: 100, default: 10 } # Últimos 10 por defecto
#      responses:
#        '200':
#          description: Movement list
#          content:
#            application/json:
#              schema:
#                type: array
#                items: { $ref: '#/components/schemas/CreditMovement' }

  /credit-lines/{id}/close:
    post:
      tags: [ CreditLines ]
      summary: Close credit line (logical delete)
      description: Requires balance=0. # Requiere saldo 0
      operationId: closeCreditLine
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Credit line closed
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CreditLineResponse' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  #Common / Cross Product

  /credits/overdue/{customerId}:
    get:
      tags: [ Common ]
      summary: Customer overdue status
      description: Returns consolidated overdue info across all credit products. # Consolida cartera
      operationId: getDebtStatusByCustomer
      parameters:
        - in: path
          name: customerId
          required: true
          schema: { type: string }
          description: Customer identifier.
      responses:
        '200':
          description: Customer Debt Summary
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OverdueStatus' }
        '404': { $ref: '#/components/responses/NotFound' }

  /credit-products/{id}:
    get:
      tags: [ Common ]
      summary: Get credit product (loan or credit line)
      operationId: getCreditProduct
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Credit product summary
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CreditProductSummary' }
        '404': { $ref: '#/components/responses/NotFound' }

  /credit-products/{id}/balance:
    get:
      tags: [ Common ]
      summary: Get product balance
      operationId: getCreditProductBalance
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CreditBalance' }
        '404': { $ref: '#/components/responses/NotFound' }

  /credit-products/{id}/movements:
    get:
      tags: [ Common ]
      summary: List product movements
      operationId: listCreditProductMovements
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: type
          schema:
            type: string
            enum: [ CHARGE, PAYMENT, INTEREST, FEE, REVERSAL ]
        - in: query
          name: limit
          schema: { type: integer, default: 10, minimum: 1, maximum: 100 }
      responses:
        '200':
          description: Movement list
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/CreditMovement' }
        '404': { $ref: '#/components/responses/NotFound' }

  /customers/{customerId}/credit-products:
    get:
      tags: [ Common ]
      summary: List customer credit products (loans + credit lines)
      operationId: listCreditProductsByCustomer
      parameters:
        - in: path
          name: customerId
          required: true
          schema: { type: string }
        - in: query
          name: kind
          schema:
            type: string
            enum: [ LOAN, CREDIT_LINE ]
        - in: query
          name: status
          schema: { $ref: '#/components/schemas/CreditStatus' }
      responses:
        '200':
          description: Product list
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/CreditProductSummary' }

components:
  responses:
    BadRequest:
      description: Validation or bad request.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    NotFound:
      description: Resource not found.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Conflict:
      description: Conflict with business rules or resource state.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    UnprocessableEntity:
      description: Semantically valid but violates domain constraints
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    ServiceUnavailable:
      description: Dependent service unavailable (e.g., customer-service)
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

  schemas:
    #Loans
    LoanType:
      type: string
      description: Loan product type.
      enum: [ PERSONAL, BUSINESS ]  # Tipos de PRÉSTAMO

    LoanResponse:
      type: object
      description: Loan stored in the system.
      required: [ id, customerId, type, limit, balance, interestAnnual, status, createdAt ]
      properties:
        id: {
          type: string,
          description: Loan id,
          readOnly: true
        }
        customerId: {
          type: string,
          readOnly: true
        }
        type: {
          $ref: '#/components/schemas/LoanType',
          readOnly: true
        }
        limit: {
          type: number,
          minimum: 0,
          description: Approved amount (max).
        }
        balance: {
          type: number, minimum: 0, readOnly: true
        }
        interestAnnual: {
          type: number,
          minimum: 0
        }
        dueDate:
          type: string
          format: date
          description: Next payment due date. # Fecha de pago próxima
        status: {
          $ref: '#/components/schemas/CreditStatus',
          readOnly: true
        }
        closedAt: {
          type: string,
          format: date-time,
          readOnly: true
        }
        closeReason: {
          type: string,
          readOnly: true
        }
        createdAt: {
          type: string,
          format: date-time,
          readOnly: true
        }
        updatedAt: {
          type: string,
          format: date-time,
          readOnly: true
        }
        currency: {
          type: string,
          example: PEN
        }

    LoanRequest:
      type: object
      description: Loan creation payload. # Payload de creación de préstamo
      additionalProperties: false
      properties:
        customerId: { type: string, description: Internal customer id. }
        documentType: { $ref: '#/components/schemas/DocumentType' }
        documentNumber: { type: string }
        type: { $ref: '#/components/schemas/LoanType' }
        limit: { type: number, minimum: 0 }
        interestAnnual: { type: number, minimum: 0 }
        dueDate:
          type: string
          format: date
          description: Next payment due date.
        currency:
          type: string
          example: PEN
          default: PEN
      required: [ type, limit, interestAnnual ]
      oneOf:
        - required: [ customerId ]
        - required: [ documentType, documentNumber ]

    LoanUpdate:
      type: object
      description: Allowed fields for partial update. # Campos permitidos en PATCH
      additionalProperties: false
      properties:
        interestAnnual: { type: number, minimum: 0 }
        dueDate:
          type: string
          format: date
          description: Next payment due date.

    # Common
    CreditStatus:
      type: string
      description: Estado del crédito.
      enum: [ ACTIVE, CLOSED, DELINQUENT ]

    DocumentType:
      type: string
      enum: [ DNI, RUC, CE ]

    CreditBalance:
      type: object
      description: Product balances (limit, used, available). # Saldos
      required: [ limit, balance, available ]
      additionalProperties: false
      properties:
        limit: { type: number, minimum: 0 }
        balance: { type: number, minimum: 0 }
        available: { type: number }

    CreditMovement:
      type: object
      description: Movement (charge, payment, interest, fee or reversal). # Movimiento
      required: [ id, creditId, type, amount, txnAt ]
      additionalProperties: false
      properties:
        id: { type: string, description: Movement id }
        creditId: { type: string, description: Product id (loan or credit line) } # Id del producto
        type:
          type: string
          enum: [ CHARGE, PAYMENT, INTEREST, FEE, REVERSAL ]
        amount: { type: number }
        txnAt: { type: string, format: date-time }
        postedAt: { type: string, format: date-time }
        runningBalance: { type: number }
        channel: { type: string }

    CreditPaymentRequest:
      type: object
      description: Payment data (owner or third-party). # Datos de pago
      required: [ amount ]
      additionalProperties: false
      properties:
        payerCustomerId: { type: string, description: Payer customer id (optional). }
        amount: { type: number, minimum: 0.01 }
        channel:
          type: string
          enum: [ CASH, TRANSFER, CARD ]
        note: { type: string, maxLength: 200 }

    CreditChargeRequest:
      type: object
      description: Charge data (card purchase). # Datos de cargo (compra)
      required: [ amount ]
      additionalProperties: false
      properties:
        amount: { type: number, minimum: 0.01 }
        merchant: { type: string, maxLength: 120 }
        channel: { type: string, default: CARD }
        note: { type: string, maxLength: 200 }

    OverdueStatus:
      type: object
      required: [ hasOverdue, totalOverdueAmount ]
      properties:
        hasOverdue:
          type: boolean
          description: True if at least one product is DELINQUENT. # Tiene mora
        totalOverdueAmount:
          type: number
          description: Sum of balances for all DELINQUENT products.

    CreditCloseRequest:
      type: object
      description: Optional data for closing (logical deletion) the credit.
      additionalProperties: false
      properties:
        reason:
          type: string
          description: Reason for closing (audit)

    Error:
      type: object
      description: RFC 7807 Problem Details. # Estructura de error
      additionalProperties: false
      properties:
        type: { type: string, example: 'https://errors.bank.com/business-rule' }
        title: { type: string, example: 'Business rule violation' }
        status: { type: integer, example: 409 }
        detail: { type: string, example: 'Customer already has an active PERSONAL loan.' }
        instance: { type: string, example: '/credits/12345' }
        code: { $ref: '#/components/schemas/ErrorCode' }
        errors:
          type: array
          items: { $ref: '#/components/schemas/FieldError' }

    FieldError:
      type: object
      description: Field validation error. # Error por campo
      additionalProperties: false
      properties:
        field: { type: string, example: 'interestAnnual' }
        message: { type: string, example: 'Must be greater or equal than 0' }
        code: { type: string, example: 'Min' }

    ErrorCode:
      type: string
      description: Business code. # Código interno
      enum:
        - CREDIT_PERSONAL_LIMIT
        - CREDIT_DELINQUENT_LOCK
        - CREDIT_CARD_LIMIT_EXCEEDED
        - CREDIT_INVALID_STATE
        - CREDIT_NOT_FOUND
        - CUSTOMER_NOT_FOUND
        - VALIDATION_ERROR
        - SERVICE_UNAVAILABLE

  # Credit Lines
    CreditLineResponse:
      type: object
      description: Credit line stored in the system. # Línea de crédito
      required: [id, customerId, limit, balance, interestAnnual, status, createdAt]
      properties:
        id: { type: string, readOnly: true }
        customerId: { type: string, readOnly: true }
        limit: { type: number, minimum: 0 }
        balance: { type: number, minimum: 0, readOnly: true }
        interestAnnual: { type: number, minimum: 0 }
        billingCycleDay:
          type: integer
          minimum: 1
          maximum: 28
          description: Statement closing day.
        paymentDueDay:
          type: integer
          minimum: 1
          maximum: 28
          description: Payment due day.
        status: { $ref: '#/components/schemas/CreditStatus', readOnly: true }
        currency: { type: string, example: PEN }
        closedAt: { type: string, format: date-time, readOnly: true }
        closeReason: { type: string, readOnly: true }
        createdAt: { type: string, format: date-time, readOnly: true }
        updatedAt: { type: string, format: date-time, readOnly: true }

    CreditLineRequest:
      type: object
      description: Credit line creation payload. # Payload de creación de línea
      additionalProperties: false
      properties:
        customerId: { type: string }
        limit: { type: number, minimum: 0 }
        interestAnnual: { type: number, minimum: 0 }
        billingCycleDay: { type: integer, minimum: 1, maximum: 28 }
        paymentDueDay: { type: integer, minimum: 1, maximum: 28 }
        currency: { type: string, example: PEN, default: PEN }
      required: [customerId, limit, interestAnnual, currency, billingCycleDay, paymentDueDay]

    CreditLineUpdate:
      type: object
      description: Allowed fields for partial update. # Campos permitidos en PATCH
      additionalProperties: false
      properties:
        interestAnnual: { type: number, minimum: 0 }
        billingCycleDay: { type: integer, minimum: 1, maximum: 28 }
        paymentDueDay: { type: integer, minimum: 1, maximum: 28 }

    CreditProductSummary:
      type: object
      description: Unified view for any credit product (loan or credit line).
      properties:
        id: { type: string }
        kind:
          type: string
          enum: [ LOAN, CREDIT_LINE ]
        status: { $ref: '#/components/schemas/CreditStatus' }
        limit: { type: number }
        balance: { type: number }
        currency: { type: string, example: PEN }
        createdAt: { type: string, format: date-time }