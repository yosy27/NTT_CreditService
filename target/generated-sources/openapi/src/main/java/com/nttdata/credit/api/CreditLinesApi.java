/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdata.credit.api;

import com.nttdata.credit.model.CreditChargeRequest;
import com.nttdata.credit.model.CreditLineRequest;
import com.nttdata.credit.model.CreditLineResponse;
import com.nttdata.credit.model.CreditLineUpdate;
import com.nttdata.credit.model.CreditMovement;
import com.nttdata.credit.model.CreditPaymentRequest;
import com.nttdata.credit.model.CreditStatus;
import com.nttdata.credit.model.Error;
import com.nttdata.credit.model.InlineObject1;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-06T19:14:38.721215100-05:00[America/Lima]")
@Validated
@Api(value = "credit-lines", description = "the credit-lines API")
public interface CreditLinesApi {

    default CreditLinesApiDelegate getDelegate() {
        return new CreditLinesApiDelegate() {};
    }

    /**
     * PATCH /credit-lines/{id}/limit : Adjust credit line limit
     * New limit must be ≥ current balance.
     *
     * @param id  (required)
     * @param inlineObject1  (required)
     * @return Limit updated (status code 200)
     */
    @ApiOperation(value = "Adjust credit line limit", nickname = "adjustCreditLineLimit", notes = "New limit must be ≥ current balance.", response = CreditLineResponse.class, tags={ "CreditLines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Limit updated", response = CreditLineResponse.class) })
    @PatchMapping(
        value = "/credit-lines/{id}/limit",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<CreditLineResponse>> adjustCreditLineLimit(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Mono<InlineObject1> inlineObject1, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().adjustCreditLineLimit(id, inlineObject1, exchange);
    }


    /**
     * POST /credit-lines/{id}/close : Close credit line (logical delete)
     * Requires balance&#x3D;0.
     *
     * @param id  (required)
     * @return Credit line closed (status code 200)
     *         or Resource not found. (status code 404)
     *         or Conflict with business rules or resource state. (status code 409)
     */
    @ApiOperation(value = "Close credit line (logical delete)", nickname = "closeCreditLine", notes = "Requires balance=0.", response = CreditLineResponse.class, tags={ "CreditLines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Credit line closed", response = CreditLineResponse.class),
        @ApiResponse(code = 404, message = "Resource not found.", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict with business rules or resource state.", response = Error.class) })
    @PostMapping(
        value = "/credit-lines/{id}/close",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<CreditLineResponse>> closeCreditLine(@ApiParam(value = "",required=true) @PathVariable("id") String id, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().closeCreditLine(id, exchange);
    }


    /**
     * POST /credit-lines : Create credit line
     * Creates a credit line used by credit cards.
     *
     * @param creditLineRequest  (required)
     * @return Credit line created (status code 201)
     */
    @ApiOperation(value = "Create credit line", nickname = "createCreditLine", notes = "Creates a credit line used by credit cards.", response = CreditLineResponse.class, tags={ "CreditLines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Credit line created", response = CreditLineResponse.class) })
    @PostMapping(
        value = "/credit-lines",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<CreditLineResponse>> createCreditLine(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Mono<CreditLineRequest> creditLineRequest, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().createCreditLine(creditLineRequest, exchange);
    }


    /**
     * DELETE /credit-lines/{id} : Delete credit line
     *
     * @param id  (required)
     * @return Deleted (status code 204)
     *         or Resource not found. (status code 404)
     *         or Conflict with business rules or resource state. (status code 409)
     */
    @ApiOperation(value = "Delete credit line", nickname = "deleteCreditLine", notes = "", tags={ "CreditLines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Deleted"),
        @ApiResponse(code = 404, message = "Resource not found.", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict with business rules or resource state.", response = Error.class) })
    @DeleteMapping(
        value = "/credit-lines/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> deleteCreditLine(@ApiParam(value = "",required=true) @PathVariable("id") String id, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().deleteCreditLine(id, exchange);
    }


    /**
     * GET /credit-lines/{id} : Get credit line by ID
     *
     * @param id  (required)
     * @return Credit line (status code 200)
     *         or Resource not found. (status code 404)
     */
    @ApiOperation(value = "Get credit line by ID", nickname = "getCreditLine", notes = "", response = CreditLineResponse.class, tags={ "CreditLines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Credit line", response = CreditLineResponse.class),
        @ApiResponse(code = 404, message = "Resource not found.", response = Error.class) })
    @GetMapping(
        value = "/credit-lines/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<CreditLineResponse>> getCreditLine(@ApiParam(value = "",required=true) @PathVariable("id") String id, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().getCreditLine(id, exchange);
    }


    /**
     * GET /credit-lines : List credit lines
     *
     * @param customerId  (optional)
     * @param status  (optional)
     * @return Credit line list (status code 200)
     */
    @ApiOperation(value = "List credit lines", nickname = "listCreditLines", notes = "", response = CreditLineResponse.class, responseContainer = "List", tags={ "CreditLines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Credit line list", response = CreditLineResponse.class, responseContainer = "List") })
    @GetMapping(
        value = "/credit-lines",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Flux<CreditLineResponse>>> listCreditLines(@ApiParam(value = "") @Valid @RequestParam(value = "customerId", required = false) String customerId,@ApiParam(value = "", allowableValues = "ACTIVE, CLOSED, DELINQUENT") @Valid @RequestParam(value = "status", required = false) CreditStatus status, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().listCreditLines(customerId, status, exchange);
    }


    /**
     * PATCH /credit-lines/{id} : Partial update (credit line)
     *
     * @param id  (required)
     * @param creditLineUpdate  (required)
     * @return Credit line updated (status code 200)
     *         or Validation or bad request. (status code 400)
     */
    @ApiOperation(value = "Partial update (credit line)", nickname = "patchCreditLine", notes = "", response = CreditLineResponse.class, tags={ "CreditLines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Credit line updated", response = CreditLineResponse.class),
        @ApiResponse(code = 400, message = "Validation or bad request.", response = Error.class) })
    @PatchMapping(
        value = "/credit-lines/{id}",
        produces = { "application/json" },
        consumes = { "application/merge-patch+json" }
    )
    default Mono<ResponseEntity<CreditLineResponse>> patchCreditLine(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Mono<CreditLineUpdate> creditLineUpdate, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().patchCreditLine(id, creditLineUpdate, exchange);
    }


    /**
     * POST /credit-lines/{id}/charges : Post charge (card purchase)
     * Validates available amount before posting.
     *
     * @param id  (required)
     * @param creditChargeRequest  (required)
     * @return Charge posted (status code 201)
     *         or Semantically valid but violates domain constraints (status code 422)
     */
    @ApiOperation(value = "Post charge (card purchase)", nickname = "postCreditLineCharge", notes = "Validates available amount before posting.", response = CreditMovement.class, tags={ "CreditLines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Charge posted", response = CreditMovement.class),
        @ApiResponse(code = 422, message = "Semantically valid but violates domain constraints", response = Error.class) })
    @PostMapping(
        value = "/credit-lines/{id}/charges",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<CreditMovement>> postCreditLineCharge(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Mono<CreditChargeRequest> creditChargeRequest, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().postCreditLineCharge(id, creditChargeRequest, exchange);
    }


    /**
     * POST /credit-lines/{id}/payments : Post payment to the credit line
     *
     * @param id  (required)
     * @param creditPaymentRequest  (required)
     * @return Payment posted (status code 201)
     */
    @ApiOperation(value = "Post payment to the credit line", nickname = "postCreditLinePayment", notes = "", response = CreditMovement.class, tags={ "CreditLines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Payment posted", response = CreditMovement.class) })
    @PostMapping(
        value = "/credit-lines/{id}/payments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<CreditMovement>> postCreditLinePayment(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Mono<CreditPaymentRequest> creditPaymentRequest, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().postCreditLinePayment(id, creditPaymentRequest, exchange);
    }


    /**
     * PUT /credit-lines/{id} : Replace credit line
     *
     * @param id  (required)
     * @param creditLineRequest  (required)
     * @return Credit line replaced (status code 200)
     */
    @ApiOperation(value = "Replace credit line", nickname = "updateCreditLine", notes = "", response = CreditLineResponse.class, tags={ "CreditLines", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Credit line replaced", response = CreditLineResponse.class) })
    @PutMapping(
        value = "/credit-lines/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<CreditLineResponse>> updateCreditLine(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Mono<CreditLineRequest> creditLineRequest, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().updateCreditLine(id, creditLineRequest, exchange);
    }

}
