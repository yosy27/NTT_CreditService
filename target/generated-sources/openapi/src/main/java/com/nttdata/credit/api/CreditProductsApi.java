/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdata.credit.api;

import com.nttdata.credit.model.CreditBalance;
import com.nttdata.credit.model.CreditMovement;
import com.nttdata.credit.model.CreditProductSummary;
import com.nttdata.credit.model.Error;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-06T19:14:38.721215100-05:00[America/Lima]")
@Validated
@Api(value = "credit-products", description = "the credit-products API")
public interface CreditProductsApi {

    default CreditProductsApiDelegate getDelegate() {
        return new CreditProductsApiDelegate() {};
    }

    /**
     * GET /credit-products/{id} : Get credit product (loan or credit line)
     *
     * @param id  (required)
     * @return Credit product summary (status code 200)
     *         or Resource not found. (status code 404)
     */
    @ApiOperation(value = "Get credit product (loan or credit line)", nickname = "getCreditProduct", notes = "", response = CreditProductSummary.class, tags={ "Common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Credit product summary", response = CreditProductSummary.class),
        @ApiResponse(code = 404, message = "Resource not found.", response = Error.class) })
    @GetMapping(
        value = "/credit-products/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<CreditProductSummary>> getCreditProduct(@ApiParam(value = "",required=true) @PathVariable("id") String id, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().getCreditProduct(id, exchange);
    }


    /**
     * GET /credit-products/{id}/balance : Get product balance
     *
     * @param id  (required)
     * @return OK (status code 200)
     *         or Resource not found. (status code 404)
     */
    @ApiOperation(value = "Get product balance", nickname = "getCreditProductBalance", notes = "", response = CreditBalance.class, tags={ "Common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = CreditBalance.class),
        @ApiResponse(code = 404, message = "Resource not found.", response = Error.class) })
    @GetMapping(
        value = "/credit-products/{id}/balance",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<CreditBalance>> getCreditProductBalance(@ApiParam(value = "",required=true) @PathVariable("id") String id, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().getCreditProductBalance(id, exchange);
    }


    /**
     * GET /credit-products/{id}/movements : List product movements
     *
     * @param id  (required)
     * @param type  (optional)
     * @param limit  (optional, default to 10)
     * @return Movement list (status code 200)
     *         or Resource not found. (status code 404)
     */
    @ApiOperation(value = "List product movements", nickname = "listCreditProductMovements", notes = "", response = CreditMovement.class, responseContainer = "List", tags={ "Common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Movement list", response = CreditMovement.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Resource not found.", response = Error.class) })
    @GetMapping(
        value = "/credit-products/{id}/movements",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Flux<CreditMovement>>> listCreditProductMovements(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = "", allowableValues = "CHARGE, PAYMENT, INTEREST, FEE, REVERSAL") @Valid @RequestParam(value = "type", required = false) String type,@Min(1) @Max(100) @ApiParam(value = "", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().listCreditProductMovements(id, type, limit, exchange);
    }

}
