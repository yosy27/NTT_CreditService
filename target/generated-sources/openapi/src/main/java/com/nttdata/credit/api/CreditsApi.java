/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdata.credit.api;

import com.nttdata.credit.model.CreditCloseRequest;
import com.nttdata.credit.model.CreditMovement;
import com.nttdata.credit.model.CreditPaymentRequest;
import com.nttdata.credit.model.CreditStatus;
import com.nttdata.credit.model.DocumentType;
import com.nttdata.credit.model.Error;
import com.nttdata.credit.model.InlineObject;
import com.nttdata.credit.model.LoanRequest;
import com.nttdata.credit.model.LoanResponse;
import com.nttdata.credit.model.LoanType;
import com.nttdata.credit.model.LoanUpdate;
import com.nttdata.credit.model.OverdueStatus;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-06T19:14:38.721215100-05:00[America/Lima]")
@Validated
@Api(value = "credits", description = "the credits API")
public interface CreditsApi {

    default CreditsApiDelegate getDelegate() {
        return new CreditsApiDelegate() {};
    }

    /**
     * PATCH /credits/{id}/limit : Adjust loan limit
     * New limit must be ≥ current balance. 
     *
     * @param id Identificador único del crédito. (required)
     * @param inlineObject  (required)
     * @return Limit updated (status code 200)
     *         or Validation or bad request. (status code 400)
     *         or Resource not found. (status code 404)
     *         or Business rule violated. (status code 409)
     */
    @ApiOperation(value = "Adjust loan limit", nickname = "adjustLoanLimit", notes = "New limit must be ≥ current balance. ", response = LoanResponse.class, tags={ "Loans", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Limit updated", response = LoanResponse.class),
        @ApiResponse(code = 400, message = "Validation or bad request.", response = Error.class),
        @ApiResponse(code = 404, message = "Resource not found.", response = Error.class),
        @ApiResponse(code = 409, message = "Business rule violated.", response = Error.class) })
    @PatchMapping(
        value = "/credits/{id}/limit",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<LoanResponse>> adjustLoanLimit(@ApiParam(value = "Identificador único del crédito.",required=true) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Mono<InlineObject> inlineObject, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().adjustLoanLimit(id, inlineObject, exchange);
    }


    /**
     * POST /credits/{id}/payments : Apply loan payment
     * Register a payment (owner or third-party). #Pago a préstamo 
     *
     * @param id  (required)
     * @param creditPaymentRequest  (required)
     * @return Payment posted (status code 201)
     *         or Validation or bad request. (status code 400)
     *         or Resource not found. (status code 404)
     *         or Conflict with business rules or resource state. (status code 409)
     */
    @ApiOperation(value = "Apply loan payment", nickname = "applyLoanPayment", notes = "Register a payment (owner or third-party). #Pago a préstamo ", response = CreditMovement.class, tags={ "Loans", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Payment posted", response = CreditMovement.class),
        @ApiResponse(code = 400, message = "Validation or bad request.", response = Error.class),
        @ApiResponse(code = 404, message = "Resource not found.", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict with business rules or resource state.", response = Error.class) })
    @PostMapping(
        value = "/credits/{id}/payments",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<CreditMovement>> applyLoanPayment(@ApiParam(value = "",required=true) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Mono<CreditPaymentRequest> creditPaymentRequest, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().applyLoanPayment(id, creditPaymentRequest, exchange);
    }


    /**
     * POST /credits/{id}/close : Close loan (logical delete)
     * Close the loan by performing a logical deletion. 
     *
     * @param id Unique credit identifier. (required)
     * @param creditCloseRequest  (optional)
     * @return Loan closed (status code 200)
     *         or Resource not found. (status code 404)
     *         or Conflict with business rules or resource state. (status code 409)
     */
    @ApiOperation(value = "Close loan (logical delete)", nickname = "closeLoan", notes = "Close the loan by performing a logical deletion. ", response = LoanResponse.class, tags={ "Loans", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Loan closed", response = LoanResponse.class),
        @ApiResponse(code = 404, message = "Resource not found.", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict with business rules or resource state.", response = Error.class) })
    @PostMapping(
        value = "/credits/{id}/close",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<LoanResponse>> closeLoan(@ApiParam(value = "Unique credit identifier.",required=true) @PathVariable("id") String id,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Mono<CreditCloseRequest> creditCloseRequest, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().closeLoan(id, creditCloseRequest, exchange);
    }


    /**
     * DELETE /credits/{id} : Delete loan
     * Delete loan 
     *
     * @param id Loan id. (required)
     * @return Delete (status code 204)
     *         or Resource not found. (status code 404)
     *         or Conflict with business rules or resource state. (status code 409)
     */
    @ApiOperation(value = "Delete loan", nickname = "deleteLoan", notes = "Delete loan ", tags={ "Loans", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Delete"),
        @ApiResponse(code = 404, message = "Resource not found.", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict with business rules or resource state.", response = Error.class) })
    @DeleteMapping(
        value = "/credits/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Void>> deleteLoan(@ApiParam(value = "Loan id.",required=true) @PathVariable("id") String id, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().deleteLoan(id, exchange);
    }


    /**
     * GET /credits/overdue/{customerId} : Customer overdue status
     * Returns consolidated overdue info across all credit products.
     *
     * @param customerId Customer identifier. (required)
     * @return Customer Debt Summary (status code 200)
     *         or Resource not found. (status code 404)
     */
    @ApiOperation(value = "Customer overdue status", nickname = "getDebtStatusByCustomer", notes = "Returns consolidated overdue info across all credit products.", response = OverdueStatus.class, tags={ "Common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Customer Debt Summary", response = OverdueStatus.class),
        @ApiResponse(code = 404, message = "Resource not found.", response = Error.class) })
    @GetMapping(
        value = "/credits/overdue/{customerId}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<OverdueStatus>> getDebtStatusByCustomer(@ApiParam(value = "Customer identifier.",required=true) @PathVariable("customerId") String customerId, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().getDebtStatusByCustomer(customerId, exchange);
    }


    /**
     * GET /credits/{id} : Get loan by ID
     *
     * @param id Loan id. (required)
     * @return Loan found (status code 200)
     *         or Resource not found. (status code 404)
     */
    @ApiOperation(value = "Get loan by ID", nickname = "getLoan", notes = "", response = LoanResponse.class, tags={ "Loans", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Loan found", response = LoanResponse.class),
        @ApiResponse(code = 404, message = "Resource not found.", response = Error.class) })
    @GetMapping(
        value = "/credits/{id}",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<LoanResponse>> getLoan(@ApiParam(value = "Loan id.",required=true) @PathVariable("id") String id, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().getLoan(id, exchange);
    }


    /**
     * GET /credits : List loans
     * Returns loans. Use filters to scope the result. # Listado global con filtros 
     *
     * @param customerId Filter by customer id. (optional)
     * @param type Filter by loan type. (optional)
     * @param status Filter by status. (optional)
     * @param includeClosed Include CLOSED loans. (optional, default to false)
     * @return Loan list (status code 200)
     */
    @ApiOperation(value = "List loans", nickname = "listLoans", notes = "Returns loans. Use filters to scope the result. # Listado global con filtros ", response = LoanResponse.class, responseContainer = "List", tags={ "Loans", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Loan list", response = LoanResponse.class, responseContainer = "List") })
    @GetMapping(
        value = "/credits",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Flux<LoanResponse>>> listLoans(@ApiParam(value = "Filter by customer id.") @Valid @RequestParam(value = "customerId", required = false) String customerId,@ApiParam(value = "Filter by loan type.", allowableValues = "PERSONAL, BUSINESS") @Valid @RequestParam(value = "type", required = false) LoanType type,@ApiParam(value = "Filter by status.", allowableValues = "ACTIVE, CLOSED, DELINQUENT") @Valid @RequestParam(value = "status", required = false) CreditStatus status,@ApiParam(value = "Include CLOSED loans.", defaultValue = "false") @Valid @RequestParam(value = "includeClosed", required = false, defaultValue="false") Boolean includeClosed, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().listLoans(customerId, type, status, includeClosed, exchange);
    }


    /**
     * PATCH /credits/{id} : Partial update
     * Updates allowed fields only. 
     *
     * @param id Loan id. (required)
     * @param loanUpdate  (required)
     * @return Loan updated (status code 200)
     *         or Validation or bad request. (status code 400)
     *         or Resource not found. (status code 404)
     *         or Conflict with business rules or resource state. (status code 409)
     */
    @ApiOperation(value = "Partial update", nickname = "patchLoan", notes = "Updates allowed fields only. ", response = LoanResponse.class, tags={ "Loans", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Loan updated", response = LoanResponse.class),
        @ApiResponse(code = 400, message = "Validation or bad request.", response = Error.class),
        @ApiResponse(code = 404, message = "Resource not found.", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict with business rules or resource state.", response = Error.class) })
    @PatchMapping(
        value = "/credits/{id}",
        produces = { "application/json" },
        consumes = { "application/merge-patch+json" }
    )
    default Mono<ResponseEntity<LoanResponse>> patchLoan(@ApiParam(value = "Loan id.",required=true) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Mono<LoanUpdate> loanUpdate, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().patchLoan(id, loanUpdate, exchange);
    }


    /**
     * POST /credits : Create loan
     * Creates a PERSONAL or BUSINESS loan.  Rules:  - PERSONAL: only one active loan per customer.  - BUSINESS: multiple loans allowed. - Admission: reject if customer has overdue debts. 
     *
     * @param loanRequest  (required)
     * @return Loan created (status code 201)
     *         or Validation or bad request. (status code 400)
     *         or Conflict with business rules or resource state. (status code 409)
     *         or Semantically valid but violates domain constraints (status code 422)
     */
    @ApiOperation(value = "Create loan", nickname = "registerLoan", notes = "Creates a PERSONAL or BUSINESS loan.  Rules:  - PERSONAL: only one active loan per customer.  - BUSINESS: multiple loans allowed. - Admission: reject if customer has overdue debts. ", response = LoanResponse.class, tags={ "Loans", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Loan created", response = LoanResponse.class),
        @ApiResponse(code = 400, message = "Validation or bad request.", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict with business rules or resource state.", response = Error.class),
        @ApiResponse(code = 422, message = "Semantically valid but violates domain constraints", response = Error.class) })
    @PostMapping(
        value = "/credits",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<LoanResponse>> registerLoan(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Mono<LoanRequest> loanRequest, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().registerLoan(loanRequest, exchange);
    }


    /**
     * GET /credits/search : Search loans by customer document
     * Returns loans for the provided document 
     *
     * @param documentType Tipo de documento (DNI, RUC, CE). (required)
     * @param documentNumber  (required)
     * @return Loans found (status code 200)
     *         or Resource not found. (status code 404)
     *         or Dependent service unavailable (e.g., customer-service) (status code 503)
     */
    @ApiOperation(value = "Search loans by customer document", nickname = "searchLoansByDocument", notes = "Returns loans for the provided document ", response = LoanResponse.class, responseContainer = "List", tags={ "Loans", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Loans found", response = LoanResponse.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Resource not found.", response = Error.class),
        @ApiResponse(code = 503, message = "Dependent service unavailable (e.g., customer-service)", response = Error.class) })
    @GetMapping(
        value = "/credits/search",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Flux<LoanResponse>>> searchLoansByDocument(@NotNull @ApiParam(value = "Tipo de documento (DNI, RUC, CE).", required = true, allowableValues = "DNI, RUC, CE") @Valid @RequestParam(value = "documentType", required = true) DocumentType documentType,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "documentNumber", required = true) String documentNumber, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().searchLoansByDocument(documentType, documentNumber, exchange);
    }


    /**
     * PUT /credits/{id} : Update Loan
     * Update Loan
     *
     * @param id Loan id. (required)
     * @param loanRequest  (required)
     * @return Loan updated (status code 200)
     *         or Validation or bad request. (status code 400)
     *         or Resource not found. (status code 404)
     *         or Conflict with business rules or resource state. (status code 409)
     */
    @ApiOperation(value = "Update Loan", nickname = "updateLoan", notes = "Update Loan", response = LoanResponse.class, tags={ "Loans", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Loan updated", response = LoanResponse.class),
        @ApiResponse(code = 400, message = "Validation or bad request.", response = Error.class),
        @ApiResponse(code = 404, message = "Resource not found.", response = Error.class),
        @ApiResponse(code = 409, message = "Conflict with business rules or resource state.", response = Error.class) })
    @PutMapping(
        value = "/credits/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default Mono<ResponseEntity<LoanResponse>> updateLoan(@ApiParam(value = "Loan id.",required=true) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Mono<LoanRequest> loanRequest, @ApiIgnore final ServerWebExchange exchange) {
        return getDelegate().updateLoan(id, loanRequest, exchange);
    }

}
